head	1.48;
access;
symbols;
locks;
comment	@// @;


1.48
date	2021.04.10.21.21.53;	author -;	state -;
branches;
next	1.47;

1.47
date	2021.04.10.21.14.15;	author -;	state -;
branches;
next	1.46;

1.46
date	2021.01.27.02.18.49;	author -;	state -;
branches;
next	1.45;

1.45
date	2021.01.27.00.49.02;	author -;	state -;
branches;
next	1.44;

1.44
date	2021.01.27.00.48.24;	author -;	state -;
branches;
next	1.43;

1.43
date	2021.01.27.00.45.39;	author -;	state -;
branches;
next	1.42;

1.42
date	2021.01.27.00.45.21;	author -;	state -;
branches;
next	1.41;

1.41
date	2021.01.27.00.43.39;	author -;	state -;
branches;
next	1.40;

1.40
date	2021.01.27.00.43.09;	author -;	state -;
branches;
next	1.39;

1.39
date	2021.01.27.00.42.49;	author -;	state -;
branches;
next	1.38;

1.38
date	2021.01.27.00.39.49;	author -;	state -;
branches;
next	1.37;

1.37
date	2021.01.27.00.39.15;	author -;	state -;
branches;
next	1.36;

1.36
date	2021.01.27.00.28.02;	author -;	state -;
branches;
next	1.35;

1.35
date	2021.01.27.00.27.52;	author -;	state -;
branches;
next	1.34;

1.34
date	2021.01.27.00.27.00;	author -;	state -;
branches;
next	1.33;

1.33
date	2021.01.27.00.26.47;	author -;	state -;
branches;
next	1.32;

1.32
date	2021.01.27.00.03.47;	author -;	state -;
branches;
next	1.31;

1.31
date	2021.01.27.00.02.00;	author -;	state -;
branches;
next	1.30;

1.30
date	2021.01.27.00.00.46;	author -;	state -;
branches;
next	1.29;

1.29
date	2021.01.26.23.59.32;	author -;	state -;
branches;
next	1.28;

1.28
date	2021.01.26.23.57.51;	author -;	state -;
branches;
next	1.27;

1.27
date	2021.01.26.23.56.38;	author -;	state -;
branches;
next	1.26;

1.26
date	2021.01.26.23.37.41;	author -;	state -;
branches;
next	1.25;

1.25
date	2021.01.26.23.37.15;	author -;	state -;
branches;
next	1.24;

1.24
date	2021.01.26.23.35.44;	author -;	state -;
branches;
next	1.23;

1.23
date	2021.01.26.23.31.00;	author -;	state -;
branches;
next	1.22;

1.22
date	2021.01.26.23.30.33;	author -;	state -;
branches;
next	1.21;

1.21
date	2021.01.26.23.29.06;	author -;	state -;
branches;
next	1.20;

1.20
date	2021.01.26.23.28.52;	author -;	state -;
branches;
next	1.19;

1.19
date	2021.01.26.23.28.07;	author -;	state -;
branches;
next	1.18;

1.18
date	2021.01.26.23.26.04;	author -;	state -;
branches;
next	1.17;

1.17
date	2021.01.26.22.11.35;	author -;	state -;
branches;
next	1.16;

1.16
date	2021.01.26.22.09.35;	author -;	state -;
branches;
next	1.15;

1.15
date	2021.01.26.22.09.09;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.01.26.22.07.54;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.01.26.22.01.47;	author -;	state -;
branches;
next	1.12;

1.12
date	2021.01.26.21.58.56;	author -;	state -;
branches;
next	1.11;

1.11
date	2021.01.26.21.55.13;	author -;	state -;
branches;
next	1.10;

1.10
date	2021.01.26.21.52.27;	author -;	state -;
branches;
next	1.9;

1.9
date	2021.01.26.21.51.21;	author -;	state -;
branches;
next	1.8;

1.8
date	2021.01.26.21.48.25;	author -;	state -;
branches;
next	1.7;

1.7
date	2021.01.26.21.46.55;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.01.26.21.44.35;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.01.26.21.43.25;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.01.26.21.41.29;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.01.26.21.39.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.01.26.21.39.15;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.01.26.21.37.53;	author -;	state -;
branches;
next	;


desc
@@


1.48
log
@-
@
text
@// $Id: shared_ptrs.cpp,v 1.46 2021-01-26 18:18:49-08 - - $

#include <iostream>
#include <memory>
#include <sstream>
#include <string>
using namespace std;

// Illustrate use of shared pointers and copying.

const string indent (5, ' ');

#define SHOWBOX { \
           cout << indent << __PRETTY_FUNCTION__ << ": " \
                << to_string() << endl; \
        }

class sbox {
   friend ostream& operator<< (ostream&, const sbox&);
   private:
      string value;
   public:
      sbox(): value ("<EMPTY>") {SHOWBOX}
      sbox (const sbox& that): value(that.value) {SHOWBOX}
      sbox (sbox&& that): value(that.value) {SHOWBOX}
      sbox& operator= (const sbox& that) {
         if (this != &that) value = that.value;
         SHOWBOX;
         return *this;
      }
      sbox& operator= (sbox&& that) {
         if (this != &that) value = that.value;
         SHOWBOX;
         return *this;
      }
      ~sbox() {SHOWBOX}
      sbox (const string& val): value(val) {SHOWBOX}
      const string& operator*() const { return value; }
      const string to_string() const {
         ostringstream result;
         result << "sbox(" << this << "->\"" << value << "\")";
         return result.str();
      }
};

ostream& operator<< (ostream& out, const sbox& box) {
   return out << "sbox(\"" << box.value << "\")";
}

using sboxptr = shared_ptr<sbox>;

#define LINE "[" << __LINE__ << "] "
#define SHOW(STMT) cout << LINE << #STMT << endl; STMT;

void showptr (const sboxptr& ptr) {
   cout << indent << ptr << "(" << ptr.use_count() << ")->"
        << (ptr ? ptr->to_string() : "nullptr") << endl;
}

int main() {
   SHOW( sboxptr junk = make_shared<sbox> (":junk:"); )
   SHOW( junk = nullptr; )
   SHOW( sboxptr a = make_shared<sbox>(); )
   SHOW( showptr(a); )
   SHOW( sboxptr b = make_shared<sbox> ("foobar"); )
   SHOW( auto single = make_shared<sbox> ("single"); )
   SHOW( showptr(single); )
   SHOW( showptr(b); )
   SHOW( a = b; )
   SHOW( showptr(a); )
   SHOW( showptr(b); )
   SHOW( sboxptr c = a )
   SHOW( showptr(c); )
   SHOW( b = nullptr; )
   SHOW( showptr(b); )
   SHOW( showptr(a); )
   SHOW( return 0; )
}
@


1.47
log
@-
@
text
@d15 1
a15 1
                << this->to_string() << endl; \
d41 1
a41 1
         result << this << "->sbox(value=\"" << value << "\")";
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.45 2021-01-26 16:49:02-08 - - $
d15 1
a15 1
                << to_string() << endl; \
d41 1
a41 1
         result << "sbox(" << this << "->\"" << value << "\")";
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.44 2021-01-26 16:48:24-08 - - $
d55 1
a55 1
void showptr (const sboxptr ptr) {
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.43 2021-01-26 16:45:39-08 - - $
d61 1
a61 1
   SHOW( sboxptr junk = make_shared<sbox>(); )
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.42 2021-01-26 16:45:21-08 - - $
d61 2
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.41 2021-01-26 16:43:39-08 - - $
d57 1
a57 1
        << (ptr ? ptr->to_string() : "nullptr" << endl;
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.40 2021-01-26 16:43:09-08 - - $
d40 3
a42 1
         return "sbox(" + to_string (this) + "->\"" << value << "\")";
a44 6

string to_string (const sbox* ptr) {
   ostringstream stream;
   stream << ptr;
   return stream.str();
}
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.39 2021-01-26 16:42:49-08 - - $
a10 6
string to_string (const void* ptr) {
   ostringstream stream;
   stream << ptr;
   return stream.str();
}

d43 7
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.38 2021-01-26 16:39:49-08 - - $
d12 2
a13 1
   ostringstream stream (ptr);
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.37 2021-01-26 16:39:15-08 - - $
d5 1
d10 5
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.36 2021-01-26 16:28:02-08 - - $
d39 1
a39 1
         return "sbox(" + this + "->\"" << value << "\")";
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.35 2021-01-26 16:27:52-08 - - $
d13 2
a14 2
           cout << indent << __PRETTY_FUNCTION__ << "(" << this \
                << "->\"" << value << "\")" << endl; \
d38 3
d52 2
a53 3
   cout << indent << ptr << "(" << ptr.use_count() << ")->";
   if (ptr) cout << *ptr; else cout << "nullptr";
   cout << endl;
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.34 2021-01-26 16:27:00-08 - - $
d13 1
a13 1
           cout << indent << __PRETTY_FUNCTION__ << "(" << this
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.33 2021-01-26 16:26:47-08 - - $
d13 2
a14 2
           cout << indent << __PRETTY_FUNCTION__ << "(\"" \
                << value << "\")" << endl; \
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.32 2021-01-26 16:03:47-08 - - $
d26 1
a26 1
         if (this != &box) value = that.value;
d31 1
a31 1
         if (this != &box) value = that.value;
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.31 2021-01-26 16:02:00-08 - - $
d23 4
a26 4
      sbox (const sbox& box): value(box.value) {SHOWBOX}
      sbox (sbox&& box): value(box.value) {SHOWBOX}
      sbox& operator= (const sbox& box) {
         if (this != &box) value = box.value;
d30 2
a31 2
      sbox& operator= (sbox&& box) {
         if (this != &box) value = box.value;
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.30 2021-01-26 16:00:46-08 - - $
d45 1
a45 1
#define LINE "[" << __LINE__ << "]"
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.29 2021-01-26 15:59:32-08 - - $
d55 15
a69 14
   SHOW (sboxptr a = make_shared<sbox>(););
   SHOW (showptr(a););
   SHOW (sboxptr b = make_shared<sbox> ("foobar"););
   SHOW (auto single = make_shared<sbox> ("single"););
   SHOW (showptr(b););
   SHOW (a = b;);
   SHOW (showptr(a););
   SHOW (showptr(b););
   SHOW (sboxptr c = a);
   SHOW (showptr(c););
   SHOW (b = nullptr;);
   SHOW (showptr(b););
   SHOW (showptr(a););
   SHOW (return 0;);;
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.28 2021-01-26 15:57:51-08 - - $
d58 1
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.27 2021-01-26 15:56:38-08 - - $
d10 2
d13 1
a13 1
           cout << "****" << __PRETTY_FUNCTION__ << "(\"" \
d49 1
a49 1
   cout << "    " << ptr << "(" << ptr.use_count() << ")->";
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.26 2021-01-26 15:37:41-08 - - $
d47 2
a48 2
   cout << "    " << X << "(" << X.use_count() << ")->";
   if (X) cout << *X; else cout << "nullptr";
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.25 2021-01-26 15:37:15-08 - - $
a43 6
#define SHOWPTR(X) { \
           cout << LINE << #X << "=" << X \
                << "(" << X.use_count() << ")->"; \
           if (X) cout << *X; else cout << "nullptr"; \
           cout << endl; \
        }
d46 6
d54 1
a54 1
   SHOWPTR(a);
d56 1
a56 1
   SHOWPTR(b);
d58 2
a59 2
   SHOWPTR(a);
   SHOWPTR(b);
d61 1
a61 1
   SHOWPTR(c);
d63 2
a64 2
   SHOWPTR(b);
   SHOWPTR(a);
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.24 2021-01-26 15:35:44-08 - - $
d11 1
a11 1
           cout << __PRETTY_FUNCTION__ << "(\"" \
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.23 2021-01-26 15:31:00-08 - - $
d11 1
a11 1
           cout << __PRETTY_FUNCTION__ << "(" << this << "->\"" \
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.22 2021-01-26 15:30:33-08 - - $
d11 1
a11 1
           cout << __PRETTY_FUNCTION__ << "(" this << "->\"" \
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.21 2021-01-26 15:29:06-08 - - $
d11 1
a11 1
           cout << __PRETTY_FUNCTION__ << "(" this << "->\" \
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.20 2021-01-26 15:28:52-08 - - $
d11 2
a12 1
           cout << __PRETTY_FUNCTION__ << "(" << value << ")" << endl; \
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.19 2021-01-26 15:28:07-08 - - $
d37 1
a37 1
   return out << "sbox("\"" << box.value << "\")";
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.18 2021-01-26 15:26:04-08 - - $
a33 1
      const sbox* address() const { return this; }
d37 1
a37 1
   return out << "sbox(" << &box.value << "->\"" << box.value << "\")";
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.17 2021-01-26 14:11:35-08 - - $
d38 1
a38 1
   return out << "sbox(" << box.address << ",\"" << box.value << "\")";
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.16 2021-01-26 14:09:35-08 - - $
d34 1
d38 1
a38 1
   return out << "sbox(\"" << box.value << "\")";
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.14 2021-01-26 14:07:54-08 - - $
d37 1
a37 1
   return out << "sbox(" << &box << ",\"" << box.value << "\")";
@


1.15
log
@-
@
text
@d59 1
a59 1
   show (sboxptr c = a);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.13 2021-01-26 14:01:47-08 - - $
d37 1
a37 1
   return out << "sbox(" << this << ",\"" << box.value << "\")";
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.12 2021-01-26 13:58:56-08 - - $
d37 1
a37 1
   return out << "sbox(" << box.value << ")";
d59 2
d63 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.11 2021-01-26 13:55:13-08 - - $
d45 1
a45 1
                << "(" << X.use_count << ")->"; \
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.10 2021-01-26 13:52:27-08 - - $
d44 1
a44 1
           cout << LINE << #X << "=" << X
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.8 2021-01-26 13:48:25-08 - - $
d44 2
a45 1
           cout << LINE << #X << "=" << X << "->"; \
d52 1
a52 1
   SHOW (sboxptr a = make_shared<sbox>();)
d54 1
a54 1
   SHOW (sboxptr b = make_shared<sbox> ("foobar");)
d56 1
a56 1
   SHOW (a = b;)
d59 1
a59 1
   SHOW (b = nullptr;)
d61 1
@


1.9
log
@-
@
text
@d42 1
d44 3
a46 3
           cout << #X << "=" << X << "->"; \
           if (X) cout << *X; else cout << "nullptr";
           cout << endl;
d48 1
a48 1
#define SHOW(STMT) cout << "[" << __LINE__ << "]" << #STMT << endl; STMT;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.7 2021-01-26 13:46:55-08 - - $
d43 3
a45 1
           cout << #X << "=" << X << "->" << *X << endl; \
d47 1
a47 1
#define SHOW(STMT) cout << #STMT << endl; STMT;
d56 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.6 2021-01-26 13:44:35-08 - - $
d45 1
a45 1
#define SHOW(X) { cout << #X << endl; X }
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.4 2021-01-26 13:41:29-08 - - $
d19 1
a19 1
      sbox(): value ("<empty>") {SHOWBOX}
d45 1
d48 1
a48 1
   sboxptr a = make_shared<sbox>();
d50 1
a50 1
   sboxptr b = make_shared<sbox> ("foobar");
d52 1
a52 1
   a = b;
d54 1
a54 1
   b = nullptr;
@


1.5
log
@-
@
text
@d33 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.3 2021-01-26 13:39:51-08 - - $
d35 1
a35 1
ostream& operator<< (const ostream& out, const sbox& box) {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.2 2021-01-26 13:39:15-08 - - $
d15 1
d35 3
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: shared_ptrs.cpp,v 1.1 2021-01-26 13:37:53-08 - - $
d38 1
a38 1
           cout << #X << "=" << X << "->" << *X << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d22 3
a24 1
         if (this != &box) value = box.value; SHOWBOX;
d27 3
a29 1
         if (this != &box) value = box.value; SHOWBOX;
@
