head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2021.05.07.08.15.18;	author -;	state -;
branches;
next	1.8;

1.8
date	2021.05.07.08.14.48;	author -;	state -;
branches;
next	1.7;

1.7
date	2021.05.07.08.14.10;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.05.07.08.13.48;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.05.07.08.12.33;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.05.07.01.39.12;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.05.07.01.33.23;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.05.07.01.33.09;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.05.01.01.20.54;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: xlist-links.cpp,v 1.5 2021-05-07 01:12:33-07 - - $

#include <cxxabi.h>
#include <iostream>
#include <memory>
#include <string>
#include <typeinfo>
#include <vector>
using namespace std;

//////////////// begin demangle ////////////////

#include <cxxabi.h>
template <typename type>
string demangle() {
   const char* name = typeid (type).name();
   int status = 0;
   // using deleter = void (*) (void*);
   unique_ptr<char,decltype (&std::free)> result {
      abi::__cxa_demangle (name, nullptr, nullptr, &status),
      std::free,
   };
   return status == 0 ? result.get() : name;
}

//////////////// end demangle ////////////////

//////////////// end xlist.h ////////////////

#ifndef __XLIST_H__
#define __XLIST_H__

template <typename value_type>
struct xlist {
   struct node;
   struct link {
      node* next;
      node* prev;
      link (node* next_, node* prev_): next(next_), prev(prev_) {}
   };
   struct node: link {
      value_type item;
      explicit node (node* next_ = nullptr, node* prev_ = nullptr,
                     const value_type& item_ = value_type()):
            link(next_, prev_), item(item_) {}
   };
   node* anchor() { return static_cast<node*> (&anchor_); }
   link anchor_;

   xlist(): anchor_ (anchor(), anchor()) {}
   xlist (const xlist&) = delete;
   xlist& operator= (const xlist&) = delete;
   xlist (xlist&&) = delete;
   xlist& operator= (xlist&&) = delete;
   ~xlist() { while (not empty()) pop_back(); }

   bool empty() { return anchor_.next == anchor(); }
   void push_back (const value_type&);
   void pop_back();
   value_type& back() { return anchor_.prev->item; }

   class iterator;
   iterator begin() { return iterator (anchor_.next); }
   iterator end() { return iterator (anchor()); }
};


template <typename value_type>
struct xlist<value_type>::iterator {
   node* curr;
   explicit iterator (node* curr_ = nullptr): curr(curr_) {}
   value_type& operator*() { return curr->item; }
   iterator& operator++() { curr = curr->next; return *this; }
   iterator& operator--() { curr = curr->prev; return *this; }
   bool operator== (const iterator &that) { return curr == that.curr; }
   bool operator!= (const iterator &that) { return curr != that.curr; }
};

template <typename value_type>
void xlist<value_type>::push_back (const value_type& item) {
   node* tmp = new node (anchor(), anchor_.prev, item);
   anchor_.prev = tmp;
   tmp->prev->next = tmp;
}

template <typename value_type>
void xlist<value_type>::pop_back() {
   node* tmp = anchor_.prev;
   anchor_.prev = tmp->prev;
   anchor_.prev->next = anchor();
   delete tmp;
}

#endif

//////////////// end xlist.h ////////////////

//////////////// begin main test file ////////////////

template <typename type, typename show_t>
ostream& show_node (typename xlist<type>::node* ptr,
                    show_t show) {
   cout << ptr << "->{next=" << ptr->next << ", prev=" << ptr->prev;
   show();
   cout << "}" << endl;
   return cout;
}

template <typename type>
void show_xlist (const string &str, xlist<type>& thelist) {
   cout << str << ":" << endl;
   show_node<type> (thelist.anchor(), [](){});
   for (typename xlist<type>::iterator itor = thelist.begin();
        itor != thelist.end(); ++itor) {
      struct {
         decltype(itor) item {};
         void operator()() { cout << ", item=(" << *item << ")"; }
      } show;
      show.item = itor;
      show_node<type> (itor.curr, show);
   }
}

template <typename type>
void print_size() {
   cout << "sizeof (" << demangle<type>() << ") = "
        << sizeof (type) << endl;
}

template <typename type>
void test_xlist (const vector<type>& data) {
   cout << string (72, '-') << endl;
   cout << "Testing:" << endl << __PRETTY_FUNCTION__ << endl;
   print_size<type>();
   print_size<xlist<type>>();
   print_size<typename xlist<type>::link>();
   print_size<typename xlist<type>::node>();
   xlist<type> list;
   show_xlist ("After declaration", list);
   for (const auto& item: data) list.push_back (item);
   show_xlist ("After vector.push_back", list);
   for (size_t num = 0; num < data.size() / 2; ++num) list.pop_back();
   show_xlist ("After vector.pop", list);
}

template <typename T1, typename T2>
ostream& operator<< (ostream& out, const pair<T1,T2>& a_pair) {
   return out << "{" << a_pair.first << "," << a_pair.second << "}";
}

int main() {
   static vector<int> v_int {2, 3, 5, 7, 11};
   static vector<string> v_str {"hello", "world", "foo", "bar", "baz"};
   static vector<pair<int,char>> v_pair {
      {'A','A'}, {'B','B'}, {'C','C'}, {'D','D'}, {'E','E'},
   };
   test_xlist (v_int);
   test_xlist (v_str);
   test_xlist (v_pair);
   cout << endl;
   return 0;
}

//////////////// end main test file ////////////////

//TEST// testxlist >testxlist.out 2>&1
//TEST// mkpspdf testxlist.ps xlist.h testxlist.cpp testxlist.out

@


1.8
log
@-
@
text
@d116 1
a116 1
         decltype(itor) item = itor;
d119 1
a119 1
      //show.item = itor;
@


1.7
log
@-
@
text
@d116 1
a116 1
         decltype(itor) item;
d118 1
a118 1
      } show (itor);
@


1.6
log
@-
@
text
@d118 1
a118 1
      } showi {itor};
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: xlist-links.cpp,v 1.4 2021-05-06 18:39:12-07 - - $
d118 1
a118 1
      } showi (itor);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: xlist-links.cpp,v 1.3 2021-05-06 18:33:23-07 - - $
d118 2
a119 2
      } show;
      show.item = itor;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: xlist-links.cpp,v 1.2 2021-05-06 18:33:09-07 - - $
d53 2
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: xlist-links.cpp,v 1.1 2021-04-30 18:20:54-07 - - $
d18 1
a18 1
   using deleter = void (*) (void*);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: circle-list.cpp,v 1.37 2021-04-28 21:40:41-07 - - $
d19 1
a19 1
   unique_ptr<char,deleter> result {
@
