head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2021.05.20.23.21.59;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.05.20.23.20.17;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.05.20.23.17.03;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.05.20.23.15.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.05.20.23.13.59;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.11.21.21.22.37;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: statfile.cpp,v 1.5 2021-05-20 16:20:17-07 - - $

// NAME
//    statfile - stat(2) files given in argv
// SYNOPSIS
//    statfile filename...
// DESCRIPTION
//    Calls the stat(2) system call and prints out struct stat
//    information about the file.

#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

#include <libgen.h>
#include <sys/stat.h>

class failure: public exception {};

using num_base = ios_base& (*) (ios_base&);

template <typename number>
void show (number value, const string& label,
           num_base base = std::dec) {
   cout << setw(12) << showbase << base << value << " " << label
        << endl << dec;
}

void showtime (const struct timespec spec, const string& label) {
   struct tm time_buf;
   localtime_r (&spec.tv_sec, &time_buf);
   char buffer[64];
   strftime (buffer, sizeof buffer, "%Y-%m-%d %T %Z", &time_buf);
   cout << setw(12) << spec.tv_sec << " "<< buffer
        << " " << label << endl;
}

void statfile (const char* filename) {
   struct stat stat_buf;
   if (stat (filename, &stat_buf) != 0) throw failure();
   cout << filename << ":" << endl;
   show (stat_buf.st_dev,     "ID of device containing file"   );
   show (stat_buf.st_ino,     "inode number"                   );
   show (stat_buf.st_mode,    "file type and mode", oct        );
   show (stat_buf.st_nlink,   "number of hard links"           );
   show (stat_buf.st_uid,     "user ID of owner"               );
   show (stat_buf.st_gid,     "group ID of owner"              );
   show (stat_buf.st_rdev,    "device ID (if special file)"    );
   show (stat_buf.st_size,    "total size, in bytes"           );
   show (stat_buf.st_blksize, "blocksize for filesystem I/O"   );
   show (stat_buf.st_blocks,  "number of 512B blocks allocated");
   showtime (stat_buf.st_atim, "time of last access"        );
   showtime (stat_buf.st_mtim, "time of last modification"  );
   showtime (stat_buf.st_ctim, "time of last status change" );
}

int main (int argc, char** argv) {
   string exec_name = basename (argv[0]);
   int exit_status = EXIT_SUCCESS;
   if (argc < 2) {
      cerr << "Usage: " << exec_name << " filename..." << endl;
      exit_status = EXIT_FAILURE;
   }else {
      for (auto argp = &argv[1]; argp != &argv[argc]; ++argp) {
         try {
            statfile (*argp);
         }catch (failure&) {
            cerr << exec_name << ": " << *argp << ": "
                 << strerror (errno) << endl;
         }
      }
   }
   return exit_status;
}

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: statfile.cpp,v 1.1 2019-11-21 13:22:37-08 - - $
d38 2
a39 1
   cout << buffer << " " << label << endl;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: statfile.cpp,v 1.2 2021-05-20 16:13:59-07 - - $
a14 1
#include <sstream>
d33 1
a33 1
void showtime (const struct timespec& spec, const string& label) {
d36 3
a38 7
   static char buffer[64];
   strftime (buffer, sizeof buffer, "%Y-%m-%d %Z %T", &time_buf);
   stringstream nanoseconds;
   nanoseconds << std::fixed << setprecision(9) << spec.tv_nsec;
cout << nanoseconds.str();
   cout << buffer << nanoseconds.str().substr(1)
        << " " << label << endl;
@


1.3
log
@-
@
text
@d40 1
a40 1
   nanoseconds << setprecision(9) << spec.tv_nsec;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: statfile.cpp,v 1.1 2019-11-21 13:22:37-08 - - $
d38 1
a38 1
   strftime (buffer, sizeof buffer, "%Y-%m-%d %T %Z", &time_buf);
d41 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: stat.cpp,v 1.12 2019-11-21 12:19:09-08 - - $
d15 1
d34 1
a34 1
void showtime (const struct timespec spec, const string& label) {
d37 1
a37 1
   char buffer[64];
d39 4
a42 1
   cout << buffer << " " << label << endl;
@
