head	1.24;
access;
symbols;
locks;
comment	@// @;


1.24
date	2021.05.13.07.56.40;	author -;	state -;
branches;
next	1.23;

1.23
date	2021.05.13.05.09.36;	author -;	state -;
branches;
next	1.22;

1.22
date	2021.05.13.05.08.26;	author -;	state -;
branches;
next	1.21;

1.21
date	2021.05.13.03.54.57;	author -;	state -;
branches;
next	1.20;

1.20
date	2021.02.25.01.56.48;	author -;	state -;
branches;
next	1.19;

1.19
date	2021.02.25.01.56.36;	author -;	state -;
branches;
next	1.18;

1.18
date	2021.02.25.01.55.11;	author -;	state -;
branches;
next	1.17;

1.17
date	2021.02.25.01.54.29;	author -;	state -;
branches;
next	1.16;

1.16
date	2020.11.20.00.52.11;	author -;	state -;
branches;
next	1.15;

1.15
date	2020.11.20.00.51.06;	author -;	state -;
branches;
next	1.14;

1.14
date	2020.11.20.00.49.45;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.11.20.00.41.15;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.11.20.00.38.37;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.11.20.00.30.21;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.11.20.00.29.39;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.11.20.00.29.27;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.11.20.00.27.17;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.11.19.23.50.26;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.11.19.22.44.45;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.11.19.22.43.14;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.11.19.22.42.15;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.11.19.22.41.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.11.19.22.41.43;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.11.19.22.38.14;	author -;	state -;
branches;
next	;


desc
@@


1.24
log
@-
@
text
@// $Id: echoserver.cpp,v 1.23 2021-05-12 22:09:36-07 - - $

#include <iostream>
#include <sstream>
#include <string>
#include <typeinfo>
using namespace std;

#include "socket.h"

string execname;

template <typename Type>
Type from_string (const string &str) { 
   stringstream stream; 
   stream << str; 
   Type result; 
   if (not (stream >> result and stream.eof())) {
      throw domain_error (string (typeid (Type).name()) + str + ")"); 
   }
   return result; 
}

void echo_server (in_port_t port) {
   server_socket listener (port);
   accepted_socket client;
   listener.accept (client);
   cout << execname << ": accepted connection: "
        << to_string (client) << endl;

   for (;;) {
      char buffer[1<<10]; 
      int nbytes = client.recv (buffer, sizeof buffer);
      if (nbytes == 0) break;
      client.send (buffer, nbytes);
      cout << execname << ": buffer \"";
      string sbuffer {buffer};
      for (char chr: sbuffer) {
         if (isprint (chr)) cout << chr;
                       else cout << "^" << char (chr ^ 0x40);
      }
      cout << "\"" << endl;
      if (sbuffer == "\x04") break;
   }
}

int main (int argc, char** argv) {
   execname = basename (argv[0]);
   if (argc != 2) {
      cerr << "Usage: " << execname << " port " << endl;
      exit (1);
   }
   cout << execname << " starting." << endl;
   echo_server (from_string<in_port_t> (argv[1]));
   cout << execname << " finished." << endl;
}

#include "socket.cpp"

@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.22 2021-05-12 22:08:26-07 - - $
d40 1
a40 1
                   else cout << "^" << char (chr ^ 0x40);
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.21 2021-05-12 20:54:57-07 - - $
d28 1
a28 1
   cout << execname << ": accepted request from "
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.20 2021-02-24 17:56:48-08 - - $
d28 3
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.19 2021-02-24 17:56:36-08 - - $
d9 1
a9 1
#include "sockets.h"
d55 1
a55 1
#include "sockets.cpp"
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.18 2021-02-24 17:55:11-08 - - $
a27 1
   string sbuffer;
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.17 2021-02-24 17:54:29-08 - - $
d35 2
a36 1
      for (char chr: buffer) {
d41 1
a41 1
      if (buffer == "\x04") break;
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.16 2020-11-19 16:52:11-08 - - $
d31 1
a31 1
      int nbytes = client.recv (buffer);
d33 1
a33 1
      client.send (buffer);
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.15 2020-11-19 16:51:06-08 - - $
d28 1
d30 1
a30 1
      string buffer; 
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.14 2020-11-19 16:49:45-08 - - $
d33 1
a33 1
      cout << execname << ": echo \"";
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.13 2020-11-19 16:41:15-08 - - $
d39 1
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.12 2020-11-19 16:38:37-08 - - $
d33 6
a38 2
      if (buffer.back() == '\n') buffer.pop_back();
      cout << execname << ": echo \"" << buffer << "\"" << endl;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.11 2020-11-19 16:30:21-08 - - $
d33 2
a34 1
      cout << execname << ": " << buffer << endl;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.10 2020-11-19 16:29:39-08 - - $
a27 1
   string buffer; 
d29 4
a32 8
      for (;;) {
         int nbytes = client.recv (buffer);
         if (nbytes == 0) break;
      }
      for (;;) {
         int nbytes = client.send (buffer);
         if (nbytes == 0) break;
      }
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.9 2020-11-19 16:29:27-08 - - $
d27 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.8 2020-11-19 16:27:17-08 - - $
d47 1
a47 1
   cout << execname << " starting."
d49 1
a49 1
   cout << execname << " finished."
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.7 2020-11-19 15:50:26-08 - - $
d11 2
d27 1
d29 9
a37 7
      string buffer; 
      int nbytes = client.recv (buffer);
      if (nbytes == 0) break;
   }
   for (;;) {
      int nbytes = client.send (buffer);
      if (nbytes == 0) break;
d42 1
d44 1
a44 2
      cerr << "Usage: " << basename (argv[0]) << " port"
           << endl;
d47 1
d49 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.6 2020-11-19 14:44:45-08 - - $
d22 3
a24 2
void echo_server (string hostname, in_port_t port) {
   client_socket serv (hostname, port);
d27 5
a31 1
      int nbytes = serv.recv (buffer);
a32 1
      cout << buffer; 
d37 2
a38 2
   if (argc != 3) {
      cerr << "Usage: " << basename (argv[0]) << " hostname port"
d42 1
a42 1
   echo_server (argv[1], from_string<in_port_t> (argv[2]));
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.5 2020-11-19 14:43:14-08 - - $
d9 1
a9 1
#include "sockets.cpp"
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.4 2020-11-19 14:42:15-08 - - $
d9 2
d17 1
a17 2
      throw domain_error (string (typeid (Type).name())
            + " from_string (" + str + ")"); 
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.3 2020-11-19 14:41:55-08 - - $
d33 2
a34 1
      cerr << "Usage: " << basename (argv[0]) hostname port" << endl;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.2 2020-11-19 14:41:43-08 - - $
d39 1
a39 1
#include "sockets/sockets.cpp"
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: echoserver.cpp,v 1.1 2020-11-19 14:38:14-08 - - $
a7 2

#include "../simple-sockets/sockets.h"
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: socketclient.cpp,v 1.5 2016-07-29 14:17:42-07 - - $
d41 2
a42 1
#include "../simple-sockets/sockets.cpp"
@
